package me.wapy.database;
import java.util.Optional;

/**
 * Created by Antonio Zaitoun on 11/02/2018.
 */

public class Column<T> extends Pair<String,Object> {

    private boolean primaryKey = false;
    private boolean foreignKey = false;
    private boolean autoGenerated = false;
    private String javaType = null;

    public boolean isAutoGenerated() {
        return autoGenerated;
    }

    public boolean isPrimaryKey() {
        return primaryKey;
    }

    public boolean isForeignKey() {
        return foreignKey;
    }

    public String getJavaType() {
        return javaType;
    }

    public Column<T> setJavaType(String javaType) {
        this.javaType = javaType;
        return this;
    }

    public Column<T> setPrimaryKey(boolean primaryKey) {
        this.primaryKey = primaryKey;
        return this;
    }

    public Column<T> setForeignKey(boolean foreignKey) {
        this.foreignKey = foreignKey;
        return this;
    }

    public Column<T>  setAutoGenerated(boolean autoGenerated) {
        this.autoGenerated = autoGenerated;
        return this;
    }

    /**
     * Creates a new pair
     *
     * @param key   The key for this pair
     * @param value The value to use for this pair
     */
    public Column(String key, Object value) {
        super(key, value);
    }

    /**
     * Optional Column of Type.
     *
     * Use this when the column is a foreign key and so your value might be null.
     *
     * @param key The name/key of the column.
     * @param value The optional value.
     * @param callback the callback that returns the value if the optional has a value.
     */
    public Column(String key, Optional<T> value, Value<T> callback) {
        super(key, value.map(callback::getValue).orElse(null));
    }


    /**
     * The Value callback.
     * @param <T> The type of object we are sending in.
     */

    @FunctionalInterface
    public interface Value<T> {

        /**
         * Return the value for the given column from the object.
         * @param value The object
         * @return
         */
        Object getValue(T value);
    }

    /**
     * A method for the database to ignore the column if it has no value.
     * @return true if value is null.
     */
    boolean shouldIgnore(){
        if (getValue() == null)
            return  false;

        return !isAutoGenerated();
    }

    /**
     * Get the key.
     * @return The key.
     */
    String getKey(){
        return fst;
    }

    /**
     * Get the value.
     * @return The value.
     */
    public Object getValue(){
        return snd;
    }

    @Override
    public boolean equals(Object var1) {
        return var1 instanceof Column && ((Column) var1).getKey().equals(getKey());
    }

    @Override
    public String toString() {
        return "Column{" +
                "Key=" + fst +
                ", Value=" + snd +
                ", primaryKey=" + primaryKey +
                ", foreignKey=" + foreignKey +
                ", autoGenerated=" + autoGenerated +
                '}';
    }
}